; rom start:
0:
602e0104 - stack pointer
00fc0030 - program counter
00fc0000
0000611c
00fc0030
00fe81fe

; start of execution:

00fc0030: 46fc 2700       movew #9984,%sr



Where the disassembled TOS file came from:
m68k-elf-objdump -b binary -m 68000 -D tos104uk.img --adjust-vma 0xfc0000 | grep -v "\.\.\." >tos-dasm2.txt

Problem: disassembler gets instruction alignment wrong and gets confused.
e.g. jump/subroutine target 0xfcb5aa isn't disassembled.

Solution: make a small disassembly of the ROM from the needed point (skip= is the address in decimal):
dd if=tos104uk.img of=b5aa.bin bs=1 skip=46506 count=5000
m68k-elf-objdump -b binary -m 68000 --adjust-vma=0xfcb5aa -D b5aa.bin | less


# To disassemble a section of ROM using Smonson Decompiler (just ignore this if you are not Smonson)
~/dev/decompiler2020/decompiler2/disassembler/dasm -s -e 3372 -f 3392  -b fc0000 -n extern.s ~/dev/tos-re/tos104uk.img \
  | ~/dev/decompiler2020/decompiler2/assisted-disassembler/add_labels.py /dev/stdin \
  | sed -e "s/0xfc\([0-9a-f]\{4\}\)/addr_\1/g" \
  | sed -e "s/0xfd\([0-9a-f]\{4\}\)/addr_1\1/g" \
  | sed -e "s/0xfe\([0-9a-f]\{4\}\)/addr_2\1/g" \
  | sed -e "s/addr_0*/addr_/" | sed -e "s/\t/  /"


